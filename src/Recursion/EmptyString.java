package Recursion;

import org.junit.Test;

public class EmptyString {
	
	/*
	 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

		Return the minimum number of steps to make the given string empty.
		
		A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
		
		A string is called palindrome if is one that reads the same backward as well as forward.
		
		 
		
		Example 1:
		
		Input: s = "ababa"
		Output: 1
		Explanation: String is already palindrome
		Example 2:
		
		Input: s = "abb"
		Output: 2
		Explanation: "abb" -> "bb" -> "". 
		Remove palindromic subsequence "a" then "bb".
		
		Example 3:
		
		Input: s = "baabb"
		Output: 2
		Explanation: "bbaab" -> "b" -> "". 
		Remove palindromic subsequence "baab" then "b".
		
		Example 4:
		
		Input: s = ""
		Output: 0
	 */
	
	@Test
	public void data1() {
		String s = "ababa";
		System.out.println(getIterationForEmptyString(s));
	}

	@Test
	public void data2() {
		String s = "abb";
		System.out.println(getIterationForEmptyString(s));
	}
	
	@Test
	public void data3() {
		String s = "baabb";
		System.out.println(getIterationForEmptyString(s));
	}
	
	@Test
	public void data4() {
		String s = "";
		System.out.println(getIterationForEmptyString(s));
	}
	
	@Test
	public void data5() {
		String s = "ababbb";
		System.out.println(getIterationForEmptyString(s));
	}
	
	
	/* Pseudo Code:
	 * 
	 * If the input string length is zero return zero.
	 * Declare variable: count
	 * Reverse the String using String Builder
	 * If input string and reversed string is equal, increment the count and return count
	 * 
	 * Iterate using for loop...
	 * 		remove the first or last character (increment the count) and compare it now
	 * 		Yes-> If it matches increment the count and return it
	 * 		No -> Increment the count continue the loop
	 * 
	 */
	
	private int getIterationForEmptyString(String s) {
		
		if(s.length() <2) return s.length();
		
		int count=0;
		StringBuilder sb=new StringBuilder(s);
		
		if(s.equals(sb.reverse().toString())) {
			return count++;
		}
		
		for (int i = 0; i < s.length(); i++) {
			sb.deleteCharAt(i);
			count++;
			if(sb.toString().equals(sb.reverse().toString())) {
				count++;
				return count;
			}
		}
		
		return count;
	}

}
